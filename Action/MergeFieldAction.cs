using MailChimpWrapper.Endpoints;
using MailChimpWrapper.Helpers;
using MailChimpWrapper.Model;
using MailChimpWrapper.Model.Common;
using MailChimpWrapper.Model.MergeField;
using MailChimpWrapper.Model.MergeField.Filters;
using MailChimpWrapper.Model.MergeField.Response;
using MailChimpWrapper.Serializers;
using Newtonsoft.Json;
using RestSharp;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using static MailChimpWrapper.Action.Common;

namespace MailChimpWrapper.Action
{
    /// <summary>
    /// Class that encapsulates all methods from mailchimp
    /// relative to MergeField
    /// </summary>
    public class MergeFieldAction : BaseAction
    {
        #region Constructor
        /// <summary>
        /// Public constructor
        /// </summary>
        /// <param name="apiKey">Client API Key generated by mailchimp</param>
        public MergeFieldAction(string apiKey) : base(apiKey)
        {
        }
        #endregion

        #region Create
        /// <summary>
        /// Creates a list on mailchimp
        /// </summary>
        /// <param name="listId">The Id of the list to be add the merge field</param>
        /// <param name="mergeField">The model that contains all info about the merge field that will be created</param>
        /// <returns></returns>
        public MailChimpWrapperResponse<MergeFieldCreateResponseModel> Create(string listId, MergeFieldCreateModel mergeField)
        {
            try
            {
                // Initialize the RestRequest from RestSharp.Newtonsoft so the serializer will user Newtonsoft defaults.
                var request = new RestRequest(ResourcesEndpoints.MergeFieldCreate(listId), Method.POST);
                // Adds the resource
                request.AddHeader("content-type", "application/json");
                request.JsonSerializer = new CustomNewtonsoftSerializer(new JsonSerializer()
                {
                    NullValueHandling = NullValueHandling.Ignore,
                });

                // Validates the object
                var validationContext = new ValidationContext(mergeField, serviceProvider: null, items: null);
                var validationResults = new List<ValidationResult>();
                var isValid = Validator.TryValidateObject(mergeField, validationContext, validationResults, false);

                if (isValid)
                {
                    request.AddJsonBody(mergeField);
                    // Execute the request
                    var response = restClient.Execute(request);

                    // If the request return ok, then return MailChimpWrapperResponse with deserialized object
                    if (response.StatusCode == System.Net.HttpStatusCode.OK)
                        return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                        {
                            objectRespose = JsonConvert.DeserializeObject<MergeFieldCreateResponseModel>(response.Content)
                        };

                    // If an error occurs, encapsulates the error in MailChimpWrapperResponse
                    var errorContent = JsonConvert.DeserializeObject<ErrorModel>(response.Content);
                    return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                    {
                        hasErrors = true,
                        error = errorContent
                    };
                }

                // If the object was not valid then creates and ErrorModel to send back
                var error = new ErrorModel
                {
                    type = "Internal Method Error.",
                    title = "One or more fields were not validated. Look in detail for more information",
                    status = 0,
                    detail = Util.GetValidationsErrors(validationResults)
                };
                return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                {
                    hasErrors = true,
                    error = error
                };
            }
            catch (Exception ex)
            {
                return ErrorResponse<MergeFieldCreateResponseModel>(ex);
            }
        }
        #endregion

        #region Read
        /// <summary>
        /// Read all merge fields from a list on mailchimp. If no options is passed, the max number
        /// of results will be 10 inside the merge-fields array
        /// </summary>
        /// <param name="listId">The listId to get the merge fields from.</param>
        /// <param name="options">The options to filter the lists result.</param>
        /// <returns></returns>
        public MailChimpWrapperResponse<MergeFieldReadAllResponseModel> ReadAll(string listId, MergeFieldReadAllOptions options = null)
        {
            try
            {
                // Adds the resource
                var request = new RestRequest(ResourcesEndpoints.MergeFieldReadAll(listId), Method.GET);
                request.JsonSerializer = new CustomNewtonsoftSerializer(new JsonSerializer()
                {
                    NullValueHandling = NullValueHandling.Ignore,
                });

                // Check if options was passed
                if (options != null)
                    SetReadAllOptions(ref request, options);

                // Execute the request
                var response = restClient.Execute(request);

                // If the request return ok, then return MailChimpWrapperResponse with deserialized object
                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                    return new MailChimpWrapperResponse<MergeFieldReadAllResponseModel>
                    {
                        objectRespose = JsonConvert.DeserializeObject<MergeFieldReadAllResponseModel>(response.Content)
                    };

                // If an error occurs, encapsulates the error in MailChimpWrapperResponse
                var errorContent = JsonConvert.DeserializeObject<ErrorModel>(response.Content);
                return new MailChimpWrapperResponse<MergeFieldReadAllResponseModel>
                {
                    hasErrors = true,
                    error = errorContent
                };
            }
            catch (Exception ex)
            {
                return ErrorResponse<MergeFieldReadAllResponseModel>(ex);
            }
        }

        /// <summary>
        /// Read the merge field info
        /// </summary>
        /// <param name="listId">The id of the list that will be read</param>
        /// <param name="mergeFieldId">Merge Field Id of the merge-field on mailchimp</param>
        public MailChimpWrapperResponse<MergeFieldReadResponseModel> Read(string listId, int mergeFieldId)
        {
            try
            {
                // Adds the resource
                var request = new RestRequest(ResourcesEndpoints.MergeFieldRead(listId, mergeFieldId), Method.GET);
                request.JsonSerializer = new CustomNewtonsoftSerializer(new JsonSerializer()
                {
                    NullValueHandling = NullValueHandling.Ignore,
                });

                // Execute the request
                var response = restClient.Execute(request);

                // If the request return ok, then return MailChimpWrapperResponse with deserialized object
                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                    return new MailChimpWrapperResponse<MergeFieldReadResponseModel>
                    {
                        objectRespose = JsonConvert.DeserializeObject<MergeFieldReadResponseModel>(response.Content)
                    };

                // If an error occurs, encapsulates the error in MailChimpWrapperResponse
                var errorContent = JsonConvert.DeserializeObject<ErrorModel>(response.Content);
                return new MailChimpWrapperResponse<MergeFieldReadResponseModel>
                {
                    hasErrors = true,
                    error = errorContent
                };
            }
            catch (Exception ex)
            {
                return ErrorResponse<MergeFieldReadResponseModel>(ex);
            }

        }
        #endregion

        #region Update
        /// <summary>
        /// Updates the merge-field by its id based on MergeFieldCreateModel object
        /// </summary>
        /// <param name="listId">The Id of the list to be updated</param>
        /// <param name="mergeFieldId">The Id of the merge field to be updated</param>
        /// <param name="mergeField">The data to update</param>
        /// <returns></returns>
        public MailChimpWrapperResponse<MergeFieldCreateResponseModel> Update(string listId, int mergeFieldId, MergeFieldCreateModel mergeField)
        {
            try
            {
                // Initialize the RestRequest from RestSharp.Newtonsoft so the serializer will user Newtonsoft defaults.
                var request = new RestRequest(ResourcesEndpoints.MergeFieldEdit(listId, mergeFieldId), Method.PATCH);
                // Adds the resource
                request.AddHeader("content-type", "application/json");
                request.JsonSerializer = new CustomNewtonsoftSerializer(new JsonSerializer()
                {
                    NullValueHandling = NullValueHandling.Ignore,
                });

                // Validates the object
                var validationContext = new ValidationContext(mergeField, serviceProvider: null, items: null);
                var validationResults = new List<ValidationResult>();
                var isValid = Validator.TryValidateObject(mergeField, validationContext, validationResults, false);

                if (isValid)
                {
                    request.AddJsonBody(mergeField);
                    // Execute the request
                    var response = restClient.Execute(request);

                    // If the request return ok, then return MailChimpWrapperResponse with deserialized object
                    if (response.StatusCode == System.Net.HttpStatusCode.OK)
                        return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                        {
                            objectRespose = JsonConvert.DeserializeObject<MergeFieldCreateResponseModel>(response.Content)
                        };

                    // If an error occurs, encapsulates the error in MailChimpWrapperResponse
                    var errorContent = JsonConvert.DeserializeObject<ErrorModel>(response.Content);
                    return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                    {
                        hasErrors = true,
                        error = errorContent
                    };
                }

                // If the object was not valid then creates and ErrorModel to send back
                var error = new ErrorModel
                {
                    type = "Internal Method Error.",
                    title = string.Format("Field {0} missing", validationResults[0]?.MemberNames.FirstOrDefault()),
                    status = 0,
                    detail = validationResults[0].ErrorMessage
                };
                return new MailChimpWrapperResponse<MergeFieldCreateResponseModel>
                {
                    hasErrors = true,
                    error = error
                };
            }
            catch (Exception ex)
            {
                return ErrorResponse<MergeFieldCreateResponseModel>(ex);
            }
        }
        #endregion

        #region Delete
        /// <summary>
        /// Delete a merge-field based on listId and mergeFieldId.
        /// </summary>
        /// <param name="listId">The Id of the list to delete the merge-field.</param>
        /// <param name="mergeFieldId">The Id of the merge-field to be deleted</param>
        /// <returns></returns>
        public MailChimpWrapperResponse<CommonDeleteResponseModel> Delete(string listId, int mergeFieldId)
        {
            try
            {
                // Adds the resource
                var request = new RestRequest(ResourcesEndpoints.MergeFieldDelete(listId, mergeFieldId), Method.DELETE);

                // Execute the request
                var response = restClient.Execute(request);

                // If the request return ok, then return MailChimpWrapperResponse with deserialized object
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                    return new MailChimpWrapperResponse<CommonDeleteResponseModel>
                    {
                        objectRespose = new CommonDeleteResponseModel()
                    };

                // If an error occurs, encapsulates the error in MailChimpWrapperResponse
                var errorContent = JsonConvert.DeserializeObject<ErrorModel>(response.Content);
                return new MailChimpWrapperResponse<CommonDeleteResponseModel>
                {
                    hasErrors = true,
                    error = errorContent
                };
            }
            catch (Exception ex)
            {
                return ErrorResponse<CommonDeleteResponseModel>(ex);
            }
        }
        #endregion

        #region Private Auxiliary Methods
        /// <summary>
        /// Set on the request all the filters from ListReadAllOptions
        /// </summary>
        /// <param name="request">Request that will be used to call the API</param>
        /// <param name="options">Object with the options of filter for mailchimp call</param>
        private void SetReadAllOptions(ref RestRequest request, MergeFieldReadAllOptions options)
        {
            if (options.fields != null && options.fields.Count > 0)
            {
                var fieldsString = "";
                for (var i = 0; i < options.fields.Count; i++)
                {
                    if (i < options.fields.Count - 1)
                        fieldsString += options.fields[i] + ",";
                    else
                        fieldsString += options.fields[i];
                }
                request.AddQueryParameter("fields", fieldsString);
            }

            if (options.exclude_fields != null && options.exclude_fields.Count > 0)
            {
                var excludeFieldsString = "";
                for (var i = 0; i < options.exclude_fields.Count; i++)
                {
                    if (i < options.fields.Count - 1)
                        excludeFieldsString += options.exclude_fields[i] + ",";
                    else
                        excludeFieldsString += options.exclude_fields[i];
                }
                request.AddQueryParameter("exclude_fields", excludeFieldsString);
            }

            if (options.count != null)
                request.AddQueryParameter("count", ((int)options.count).ToString());

            if (options.offset != null)
                request.AddQueryParameter("offset", ((int)options.offset).ToString());

            if (!string.IsNullOrEmpty(options.type))
                request.AddQueryParameter("type", options.type);

            if (options.required != null)
                request.AddQueryParameter("required", ((bool)options.required).ToString().ToLower());
        }
        #endregion
    }
}
