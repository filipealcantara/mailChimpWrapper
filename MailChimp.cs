using MailChimpWrapper.Action;
using System;

namespace MailChimpWrapper
{
    /// <summary>
    /// Primary Class to hold all the actions
    /// </summary>
    public class MailChimp
    {
        private string _apiKey;

        #region Constructor
        /// <summary>
        /// Public constructor
        /// </summary>
        /// <param name="apiKey">Client API Key generated by mailchimp</param>
        public MailChimp(string apiKey)
        {
            _apiKey = apiKey;
        }
        #endregion

        #region Actions
        private BatchAction _batchAction;
        /// <summary>
        /// Get the BatchAction object that contains the Batch Operations on MailChimp
        /// </summary>
        public BatchAction BatchAction
        {
            get
            {
                return ReturnAction(ref _batchAction);
            }
        }
        private ListAction _listAction;
        /// <summary>
        /// Get the ListAction object that contains the List Operations on MailChimp
        /// </summary>
        public ListAction ListAction
        {
            get
            {
                return ReturnAction(ref _listAction);
            }
        }
        private MembersAction _membersAction;
        /// <summary>
        /// Get the MembersAction object that contains the Members Operations on MailChimp
        /// </summary>
        public MembersAction MembersAction
        {
            get
            {
                return ReturnAction(ref _membersAction);
            }
        }
        private MergeFieldAction _mergeFieldAction;
        /// <summary>
        /// Get the MergeFieldAction object that contains the MergeField Operations on MailChimp
        /// </summary>
        public MergeFieldAction MergeFieldAction
        {
            get
            {
                return ReturnAction(ref _mergeFieldAction);
            }
        }
        #endregion

        /// <summary>
        /// A factory to return or instantiate the action required
        /// </summary>
        /// <typeparam name="T">The class type to return or instantiate</typeparam>
        /// <param name="obj">The object to be returned or instantiated</param>
        /// <returns></returns>
        private T ReturnAction<T>(ref T obj)
        {
            // If the object already exist then return it, else activate with apiKey param
            if (obj != null)
                return obj;
            obj = (T)Activator.CreateInstance(typeof(T), new[] { _apiKey });
            return obj;
        }
    }
}
